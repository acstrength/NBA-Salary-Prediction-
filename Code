## load libraries ##
library(dplyr)
library(caret)
library(corrplot)
library(randomForest)

## load in data sets ##
salaries_24_25<-read.csv("C:/Users/akeem/Desktop/Data/NBA Salaries.csv")
stats_17_18<-read.csv("C:/Users/akeem/Desktop/Data/NBA_17_18_Stats.csv")
stats_18_19<-read.csv("C:/Users/akeem/Desktop/Data/NBA_18_19_Stats.csv")
stats_19_20<-read.csv("C:/Users/akeem/Desktop/Data/NBA_19_20_Stats.csv")
stats_20_21<-read.csv("C:/Users/akeem/Desktop/Data/NBA_20_21_Stats.csv")
stats_21_22<-read.csv("C:/Users/akeem/Desktop/Data/NBA_21_22_Stats.csv")
stats_22_23<-read.csv("C:/Users/akeem/Desktop/Data/NBA_22_23_Stats.csv")

## remove extra columns ##
stats_17_18<-stats_17_18%>%
  select(-RANK,-TRB.,-AST.,-MIN.,-USG.)

stats_18_19<-stats_18_19%>%
  select(-RANK,-TRB.,-AST.,-MIN.,-USG.)

stats_19_20<-stats_19_20%>%
  select(-RANK,-TRB.,-AST.,-MIN.,-USG.)

stats_20_21<-stats_20_21%>%
  select(-RANK,-TRB.,-AST.,-MIN.,-USG.)

stats_21_22<-stats_21_22%>%
  select(-RANK,-TRB.,-AST.,-MIN.,-USG.)

stats_22_23<-stats_22_23%>%
  select(-RANK,-P.R,-P.A,-P.R.A,-USG.)

## standardize variable names ##
stats_17_18<- stats_17_18 %>%
  rename(
    Name = FULL.NAME,
    Team = TEAM,
    POS = POS,
    Age = AGE,
    GP = GP,
    MPG = MPG,
    FTp = FT.,
    `2PA` = X2PA,
    `2Pp` = X2P.,
    `3PA` = X3PA,
    `3Pp` = X3P.,
     TS = TS.)

stats_17_18<-stats_17_18%>%
  mutate(TOr = TOr * 100)
    
stats_18_19 <- stats_18_19 %>%
  rename(
    Name = FULL.NAME,
    Team = TEAM,
    Age = AGE,
    TOr = Tor.,
    FTp = FT.,
    `2PA` = X2PA,
    `2Pp` = X2P.,
    `3PA` = X3PA,
    `3Pp` = X3P.,
     TS = TS.)

stats_18_19<-stats_18_19%>%
  mutate(TOr = TOr * 100)
  
stats_19_20 <- stats_19_20 %>%
  rename(
    Name = FULL.NAME,
    Team = TEAM,
    Age = AGE,
    FTp = FT.,
    TOr = TO.,
    `2PA` = X2PA,
    `2Pp` = X2P.,
    `3PA` = X3PA,
    `3Pp` = X3P.,
    TS = TS.)
 
stats_20_21 <- stats_20_21 %>%
  rename(
    Name = FULL.NAME,
    Team = TEAM,
    Age = AGE,
    FTp = FT.,
    TOr = TO.,
    `2PA` = X2PA,
    `2Pp` = X2P.,
    `3PA` = X3PA,
    `3Pp` = X3P.,
    TS = TS.)
  
stats_21_22 <- stats_21_22%>%
  rename(
    Name = FULL.NAME,
    Team = TEAM,
    Age = AGE,
    FTp = FT.,
    `2PA` = X2PA,
    `2Pp` = X2P.,
    `3PA` = X3PA,
    `3Pp` = X3P.,
     TOr = TO.,
    TS = TS.)

stats_22_23 <- stats_22_23 %>%
  rename(
    Name = NAME,
    Team = TEAM,
    Age = AGE,
    FTp = FT.,
    `2PA` = X2PA,
    `2Pp` = X2P.,
    `3PA` = X3PA,
    `3Pp` = X3P.,
     TOr = TO.,
     TS = TS.,
     TOPG = TPG,
     ORTG = ORtg,
     DRTG = DRtg)

salaries_24_25<-salaries_24_25%>%
  rename(Name = Player)
    
  ## align data types ##
stats_17_18$Age<-as.numeric(stats_17_18$Age)

## combine stats ##
all_stats<-bind_rows(stats_17_18,stats_18_19,stats_19_20,stats_20_21,stats_21_22,
                     stats_22_23)

## check for and remove NA values ##
na_count<-sum(is.na(all_stats))
all_stats<-na.omit(all_stats)


## get averages across all years ##
avg_stats<-all_stats%>%
  group_by(Name)%>%
  summarise(
    GP = round(mean(GP),2),
    MPG = round(mean(MPG),2),
    TOr = round(mean(TOr),2),
    FTA = round(mean(FTA),2),
    FTp = round(mean(FTp),2),
    PA_2 = round(mean(`2PA`),2),
    Pp_2 = round(mean(`2Pp`),2),
    PA_3 = round(mean(`3PA`),2),
    Pp_3 = round(mean(`3Pp`),2),
    eFG. = round(mean(eFG.),2),
    TS = round(mean(TS),2),
    PPG = round(mean(PPG),2),
    RPG = round(mean(RPG),2),
    APG = round(mean(APG),2),
    SPG = round(mean(SPG),2),
    BPG = round(mean(BPG),2),
    TOPG = round(mean(TOPG),2),
    VI = round(mean(VI),2),
    ORTG = round(mean(ORTG),2),
    DRTG = round(mean(DRTG),2))

## join salary data frame ##
joined_stats<-avg_stats%>%
  inner_join(salaries_24_25,by = 'Name')

## remove extra columns ##  
joined_stats<-joined_stats%>%
  select(-X2025.26,-X2026.27,-X2027.28,-X2028.29,-X2029.30,-Guaranteed)%>%
  rename(salary_24_25 = X2024.25)

## remove dollar sign and comma ##
joined_stats$salary_24_25<-as.numeric(gsub("[$,]","",joined_stats$salary_24_25))


## check for multicollinearity ##
cor_matrix<-cor(joined_stats%>%
                  select(-salary_24_25,-Name,-Tm))

## visualize correlation matrix
viz_cor_matrix<-corrplot(cor_matrix,method='circle',type = "upper")

## remove high correlating variables ##
joined_stats<-joined_stats%>%
  select(-TOPG,-FTA,-eFG.)

## Fit Multiple Linear Regression Model ##
lr_model1<-lm(salary_24_25 ~ . - Name - Tm, data = joined_stats)
summary(lr_model1)

## Fit multiple linear regression model with interaction effects ##

lr_model2<-lm(salary_24_25 ~ GP*MPG+TOr+FTp+PA_2*Pp_2+PA_3*Pp_3+TS+PPG+
         RPG+APG+SPG+BPG+VI+ORTG+DRTG+Rk,data = joined_stats)
summary(lr_model2)

## split data into training and testing sets ##
set.seed(123)
train_index<-sample(1:nrow(joined_stats),0.8 * nrow(joined_stats))
train_data<-joined_stats[train_index, ]
test_data<-joined_stats[-train_index, ]

## make predictions with multiple linear regression model ##
lr_predictions<-predict(lr_model2,newdata = test_data)

## calculate residuals ##
residuals<-test_data$salary_24_25 - lr_predictions

## calculate MSE ##
lr_MSE<-mean(residuals^2)

## calculate RMSE ##
lr_RMSE<-sqrt(lr_MSE)

## calculate MAE ##
lr_MAE<-mean(abs(residuals))

## display results ##
cat("Mean Squared Error (MSE):", lr_MSE, "\n")
cat("Root Mean Squared Error (RMSE)", lr_RMSE, "\n")
cat("Mean Absolute Error (MAE):",lr_MAE,"\n")

## fit random Forest model ##
rf_model<-randomForest(salary_24_25 ~ GP + MPG + TOr + FTp + PA_2 + Pp_2 + 
                           PA_3 + Pp_3 + TS + PPG + RPG + APG + SPG + 
                           BPG + VI + ORTG + Rk,
                         data = train_data,
                         ntree = 500)
print(rf_model)

## visualize importance of variables ##
importance(rf_model)
varImpPlot(rf_model, col = 'blue',main = 'Variable Importance Plot') 

## make predictions with random forest model ##
rf_predictions<-predict(rf_model, newdata = test_data)

## calculate RMSE ##
rf_rmse<-sqrt(mean((rf_predictions - test_data$salary_24_25)^2))
cat("Random Forest RMSE:",rf_rmse, "\n")

## calculate MAE ##
rf_mae<-mean(abs(rf_predictions - test_data$salary_24_25))
cat("Random Forest MAE:",rf_mae, "\n")

## calculate MSE ##
rf_mse<-mean((rf_predictions - test_data$salary_24_25)^2)

## display results ##
cat("Random Forest RMSE:",rf_rmse, "\n")
cat("Random Forest MSE:",rf_mse, "\n")
cat("Random Forest MAE:",rf_mae, "\n")

## create scatter plot of actual vs predicted salaries ##
results<-data.frame(Actual = test_data$salary_24_25, Predicted = rf_predictions)
ggplot(results, aes(x = Actual, y = Predicted)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, color = "black") +
  theme_minimal() +
  scale_x_continuous(labels = scales::comma) +
  scale_y_continuous(labels = scales::comma) +
  labs(title = "Actual vs Predicted Salaries", x = "Actual", y = "Predicted")

  
  


